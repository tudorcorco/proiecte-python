
CREATE DATABASE Corcoveanu_Tudor;
GO


USE Corcoveanu_Tudor;
GO




CREATE TABLE Doctors (
    DoctorID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Specialty VARCHAR(100) NOT NULL,
    PhoneNumber VARCHAR(15),
    Email VARCHAR(100) UNIQUE
);


CREATE TABLE Patients (
    PatientID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    PhoneNumber VARCHAR(15),
    Email VARCHAR(100) UNIQUE
);


CREATE TABLE Appointments (
    AppointmentID INT PRIMARY KEY,
    PatientID INT,
    DoctorID INT,
    AppointmentDate DATE NOT NULL,
    Diagnosis VARCHAR(255),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID)
);


CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100) NOT NULL,
    HeadDoctorID INT,
    FOREIGN KEY (HeadDoctorID) REFERENCES Doctors(DoctorID)
);


CREATE TABLE Medications (
    MedicationID INT PRIMARY KEY,
    MedicationName VARCHAR(100) NOT NULL,
    Dosage VARCHAR(50),
    Price DECIMAL(10, 2)
);

CREATE TABLE Prescriptions (
    PrescriptionID INT PRIMARY KEY,
    DoctorID INT,
    MedicationID INT,
    PatientID INT,
    PrescriptionDate DATE NOT NULL,
    FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID),
    FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)
);




INSERT INTO Doctors VALUES
(1, 'John', 'Doe', 'Cardiology', '1234567890', 'jdoe@hospital.com'),
(2, 'Jane', 'Smith', 'Neurology', '0987654321', 'jsmith@hospital.com'),
(3, 'Alice', 'Johnson', 'Orthopedics', '1112223333', 'ajohnson@hospital.com');


INSERT INTO Patients VALUES
(1, 'Emily', 'Brown', '1990-05-15', '2223334444', 'ebrown@gmail.com'),
(2, 'Michael', 'Clark', '1985-10-22', '3334445555', 'mclark@gmail.com'),
(3, 'Sarah', 'Davis', '1993-12-02', '4445556666', 'sdavis@gmail.com'),
(4, 'Daniel', 'White', '1992-04-18', '5556667777', 'dwhite@gmail.com'),
(5, 'Emma', 'Hill', '1998-07-30', '6667778888', 'ehill@gmail.com');


INSERT INTO Appointments VALUES
(1, 1, 1, '2025-01-10', 'High Blood Pressure'),
(2, 2, 2, '2025-01-11', 'Migraine'),
(3, 3, 3, '2025-01-12', 'Fractured Arm'),
(4, 1, 2, '2025-01-13', 'Neurological Exam'),
(5, 4, 1, '2025-01-14', 'Heart Checkup');


INSERT INTO Departments VALUES
(1, 'Cardiology', 1),
(2, 'Neurology', 2),
(3, 'Orthopedics', 3);


INSERT INTO Medications VALUES
(1, 'Aspirin', '500mg', 5.00),
(2, 'Paracetamol', '500mg', 3.50),
(3, 'Ibuprofen', '200mg', 4.00),
(4, 'Amoxicillin', '250mg', 8.00),
(5, 'Metformin', '500mg', 6.00);

INSERT INTO Prescriptions VALUES
(1, 1, 1, 1, '2025-01-10'), 
(2, 2, 2, 2, '2025-01-11'), 
(3, 3, 3, 3, '2025-01-12'),
(4, 1, 4, 4, '2025-01-13'), 
(5, 2, 5, 5, '2025-01-14');

-- 1. Retrieve all appointments and their associated doctor and patient details
-- Using data from three tables: Appointments, Patients, and Doctors
SELECT 
    Appointments.AppointmentID,
    Patients.FirstName AS PatientFirstName,
    Patients.LastName AS PatientLastName,
    Doctors.FirstName AS DoctorFirstName,
    Doctors.LastName AS DoctorLastName,
    Appointments.AppointmentDate,
    Appointments.Diagnosis
FROM Appointments
JOIN Patients ON Appointments.PatientID = Patients.PatientID
JOIN Doctors ON Appointments.DoctorID = Doctors.DoctorID;

-- 2. Get the list of doctors sorted by specialty
-- Using ORDER BY clause
SELECT DoctorID, FirstName, LastName, Specialty 
FROM Doctors
ORDER BY Specialty;

SELECT DoctorID, FirstName, LastName, Specialty 
FROM Doctors
ORDER BY FirstName;

-- 3. Count the number of patients grouped by their assigned doctor
-- Using GROUP BY clause
SELECT 
    Doctors.DoctorID,
    Doctors.FirstName,
    Doctors.LastName,
    COUNT(Appointments.PatientID) AS PatientCount
FROM Doctors
LEFT JOIN Appointments ON Doctors.DoctorID = Appointments.DoctorID
GROUP BY Doctors.DoctorID, Doctors.FirstName, Doctors.LastName;

-- 4. Retrieve all medications priced above $4.00, sorted by price
-- Using WHERE and ORDER BY clauses
SELECT MedicationID, MedicationName, Dosage, Price 
FROM Medications
WHERE Price > 4.00
ORDER BY Price DESC;

--Number of Patients treated by department
SELECT
Departments.DepartmentName,
COUNT(Appointments.PatientID) AS TotalPatients
FROM Appointments
JOIN Doctors ON Appointments.DoctorID = Doctors.DoctorID
JOIN Departments ON Doctors.DoctorID = Departments.HeadDoctorID
GROUP BY Departments.DepartmentName;

--Total revenue Generated by each medication
SELECT  Medications.MedicationName,
SUM(MedicationS.Price) AS TotalRevenue
FROM Prescriptions
JOIN Medications ON Prescriptions.MedicationID = Medications.MedicationID
GROUP BY Medications.MedicationName;

-- 5. Retrieve all departments and the name of their head doctor
-- Joining Departments and Doctors tables
SELECT 
    Departments.DepartmentName,
    Doctors.FirstName AS HeadDoctorFirstName,
    Doctors.LastName AS HeadDoctorLastName
FROM Departments
JOIN Doctors ON Departments.HeadDoctorID = Doctors.DoctorID;

-- 6. Find all patients who have appointments on a specific date
-- Using WHERE clause with date filtering
SELECT Patients.FirstName, Patients.LastName, Appointments.AppointmentDate
FROM Patients
JOIN Appointments ON Patients.PatientID = Appointments.PatientID
WHERE Appointments.AppointmentDate = '2025-01-11';

-- 7. Retrieve the average price of medications
-- Using AVG() function
SELECT AVG(Price) AS AverageMedicationPrice
FROM Medications;

-- 8. Retrieve details of the patient with the earliest appointment
-- Using MIN() function
SELECT 
    Patients.FirstName, 
    Patients.LastName, 
    Appointments.AppointmentDate AS EarliestAppointment
FROM Patients
JOIN Appointments ON Patients.PatientID = Appointments.PatientID
WHERE Appointments.AppointmentDate = (
    SELECT MIN(AppointmentDate) FROM Appointments
);

-- 9. Retrieve all patients with no appointments
-- Using a LEFT JOIN to find patients not in Appointments
SELECT FirstName, LastName 
FROM Patients
WHERE PatientID NOT IN (SELECT PatientID FROM Appointments);

-- 10. Retrieve the total revenue generated by selling medications
-- Using SUM() function
SELECT SUM(Price) AS TotalRevenue
FROM Medications;


-- 11. Query to retrieve all prescriptions with details of doctors, medications, and patients
SELECT 
    Prescriptions.PrescriptionID,
    Doctors.FirstName AS DoctorFirstName,
    Doctors.LastName AS DoctorLastName,
    Medications.MedicationName,
    Patients.FirstName AS PatientFirstName,
    Patients.LastName AS PatientLastName,
    Prescriptions.PrescriptionDate
FROM Prescriptions
JOIN Doctors ON Prescriptions.DoctorID = Doctors.DoctorID
JOIN Medications ON Prescriptions.MedicationID = Medications.MedicationID
JOIN Patients ON Prescriptions.PatientID = Patients.PatientID;